-- Create Tables

ALTER SYSTEM SET common_user_prefix = '' SCOPE = SPFILE;

CREATE USER ProyectoHotel IDENTIFIED BY Fidelitas1234;

GRANT CONNECT, RESOURCE TO ProyectoHotel;
/

--FK_ColumnName_CurrentTable_RelatedTable

CREATE TABLE UserRole (
    UserRoleID  NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    Description VARCHAR2(300)
);

CREATE TABLE UserMapping (
    UserId NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    RoleId NUMBER(10) NOT NULL,
    Username VARCHAR2(50) UNIQUE NOT NULL,
    CONSTRAINT FK_UserId_User_UserRole FOREIGN KEY (RoleId) REFERENCES UserRole(UserRoleID)
);

CREATE TABLE StatusCatalog (
    StatusId NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    Status VARCHAR2(100) NOT NULL,
    Description VARCHAR2(300)
);

CREATE TABLE Person (
    Id NUMBER PRIMARY KEY,
    Name VARCHAR2(100),
    PhoneNumber VARCHAR2(20),
    Email VARCHAR2(100),
    Address VARCHAR2(255),
    BirthDate DATE
);

CREATE TABLE Costumer (
    Id NUMBER PRIMARY KEY,
    PersonId NUMBER,
    ReservationCount NUMBER,
    CONSTRAINT FK_PersonId_Costumer_Person FOREIGN KEY (PersonId) REFERENCES Person(Id)
);

CREATE TABLE EmployeeRole (
    Id NUMBER PRIMARY KEY,
    Name VARCHAR2(50),
    Description VARCHAR2(255)
);

CREATE TABLE Hotel (
    Id NUMBER PRIMARY KEY,
    Name VARCHAR2(100),
    Description VARCHAR2(255)
);

CREATE TABLE Employee (
    Id NUMBER PRIMARY KEY,
    HotelId NUMBER,
    PersonId NUMBER,
    RoleId NUMBER,
    StartDate DATE,
    Salary NUMBER(10,2),
    CONSTRAINT FK_HotelId_Employee_Hotel FOREIGN KEY (HotelId) REFERENCES Hotel(Id),
    CONSTRAINT FK_PersonId_Employee_Person FOREIGN KEY (PersonId) REFERENCES Person(Id),
    CONSTRAINT FK_RoleId_Employee_EmployeeRole FOREIGN KEY (RoleId) REFERENCES EmployeeRole(Id)
);

CREATE TABLE RoomCategory (
    Id NUMBER PRIMARY KEY,
    Category VARCHAR2(50),
    Description VARCHAR2(255)
);

CREATE TABLE Room (
    Id NUMBER PRIMARY KEY,
    HotelId NUMBER,
    RoomCategoryId NUMBER,
    BedsQty NUMBER,
    Price NUMBER(10,2),
    CONSTRAINT FK_HotelId_Room_Hotel FOREIGN KEY (HotelId) REFERENCES Hotel(Id),
    CONSTRAINT FK_RoomCategoryId_Room_RoomCategory FOREIGN KEY (RoomCategoryId) REFERENCES RoomCategory(Id)
);

CREATE TABLE RoomStatus (
    Id NUMBER PRIMARY KEY,
    RoomId NUMBER,
    StatusId NUMBER,
    "Comment" VARCHAR2(255),
    CONSTRAINT FK_RoomId_RoomStatus_Room FOREIGN KEY (RoomId) REFERENCES Room(Id),
    CONSTRAINT FK_StatusId_RoomStatus_StatusCatalog FOREIGN KEY (StatusId) REFERENCES StatusCatalog(StatusId)
);

CREATE TABLE RoomReservation (
    Id NUMBER PRIMARY KEY,
    RoomId NUMBER,
    CostumerId NUMBER,
    CheckInDate DATE,
    CheckOutDate DATE,
    Price NUMBER(10,2),
    "Comment" VARCHAR2(255),
    CONSTRAINT FK_RoomId_RoomReservation_Room FOREIGN KEY (RoomId) REFERENCES Room(Id),
    CONSTRAINT FK_CostumerId_RoomReservation_Costumer FOREIGN KEY (CostumerId) REFERENCES Costumer(Id)
);

CREATE TABLE BedCategory (
    Id NUMBER PRIMARY KEY,
    Category VARCHAR2(50),
    Description VARCHAR2(255)
);

CREATE TABLE Bed (
    Id NUMBER PRIMARY KEY,
    RoomId NUMBER,
    BedCategoryId NUMBER,
    "Comment" VARCHAR2(255),
    CONSTRAINT FK_RoomId_Bed_Room FOREIGN KEY (RoomId) REFERENCES Room(Id),
    CONSTRAINT FK_BedCategoryId_Bed_BedCategory FOREIGN KEY (BedCategoryId) REFERENCES BedCategory(Id)
);

CREATE TABLE ActivityCategory (
    Id NUMBER PRIMARY KEY,
    Name VARCHAR2(50),
    Description VARCHAR2(255)
);

CREATE TABLE Activity (
    Id NUMBER PRIMARY KEY,
    HotelId NUMBER,
    ActivityCategoryId NUMBER,
    Price NUMBER(10,2),
    CONSTRAINT FK_HotelId_Activity_Hotel FOREIGN KEY (HotelId) REFERENCES Hotel(Id),
    CONSTRAINT FK_ActivityCategoryId_Activity_ActivityCategory FOREIGN KEY (ActivityCategoryId) REFERENCES ActivityCategory(Id)
);

CREATE TABLE ActivityReservation (
    Id NUMBER PRIMARY KEY,
    ActivityId NUMBER,
    StatusId NUMBER,
    CostumerId NUMBER,
    Price NUMBER(10,2),
    "Comment" VARCHAR2(255),
    AttenderQty NUMBER,
    CONSTRAINT FK_ActivityId_ActivityReservation_Activity FOREIGN KEY (ActivityId) REFERENCES Activity(Id),
    CONSTRAINT FK_StatusId_ActivityReservation_StatusCatalog FOREIGN KEY (StatusId) REFERENCES StatusCatalog(StatusId),
    CONSTRAINT FK_CostumerId_ActivityReservation_Costumer FOREIGN KEY (CostumerId) REFERENCES Costumer(Id)
);

CREATE TABLE Supplier (
    Id NUMBER PRIMARY KEY,
    HotelId NUMBER,
    Location VARCHAR2(100),
    Name VARCHAR2(100),
    ContactPersonName VARCHAR2(100),
    PhoneNumber VARCHAR2(20),
    CONSTRAINT FK_HotelId_Supplier_Hotel FOREIGN KEY (HotelId) REFERENCES Hotel(Id)
);

CREATE TABLE Supply (
    Id NUMBER PRIMARY KEY,
    SupplierId NUMBER,
    SupplyName VARCHAR2(100),
    Qty NUMBER,
    TotalPrice NUMBER(10,2),
    CONSTRAINT FK_SupplierId_Supply_Supplier FOREIGN KEY (SupplierId) REFERENCES Supplier(Id)
);
/

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--INSERTS

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- ********************************** STORED PROCEDURES **********************************


-- ============================================================================      
-- Author: Elias Viquez     
-- Create date:  4 Julio 2025      
-- Description:  Insert a new Activity reservation assoaciated to the customer
-- Materia: Fundamentos de bases de datos relacionales        
-- Version: 1.0.0      
-- REF: 00      
-- HISTORY:      
-- ============================================================================      
CREATE OR REPLACE PROCEDURE [dbo].[SP_GN_AddActivityReservation]              
                 @ActivityId INT,
				 @CustomerId INT = NULL,
				 @StatusId INT = NULL,
				 @Price DECIMAL(10,2) = NULL,
				 @Comment VARCHAR(255) = NULL,
				 @AttenderQty INT = NULL

AS
	BEGIN
		-- START TRY
			BEGIN TRY
					INSERT INTO   [dbo].[ActivityReservation]
								  ([ActivityID]
								  ,[CustomerID]
								  ,[StatusID]
								  ,[Price]
								  ,[Comment]	
								  ,[AttenderQty])
						 VALUES
								  (@ActivityId
								  ,@CustomerId
								  ,@StatusId
								  ,@Price
								  ,@Comment
								  ,@AttenderQty)
		-- END TRY
			END TRY
	--START CATCH
	BEGIN CATCH
		SELECT
				ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
 
END


/***********************************************************************************************************************************/


-- ============================================================================      
-- Author: Elias Viquez     
-- Create date:  4 Julio 2025      
-- Description:  Insert a new room, bed or activity category according to a param
-- Materia: Fundamentos de bases de datos relacionales        
-- Version: 1.0.0      
-- REF: 00      
-- HISTORY:      
-- ============================================================================      
CREATE OR REPLACE PROCEDURE [dbo].[SP_GN_AddNewCategory]              
                @CategoryType VARCHAR (20),
				@CategoryName VARCHAR(255) = NULL,
				@Description VARCHAR(255) = NULL
AS                 
	BEGIN        
	-- No Display the count message        
	 SET NOCOUNT ON;        
	 BEGIN TRY        
		  IF UPPER(@CategoryType) = 'ROOM'           
			 BEGIN         
				  INSERT INTO   [dbo].[RoomCategory](
								[Category],
								[Description])
					   VALUES	(@CategoryName,
								@Description)
              END      

		ELSE IF UPPER(@CategoryType) = 'BED'         
			BEGIN         
			    INSERT INTO   [dbo].[BedCategory](
								[Category],
								[Description])
					   VALUES	(@CategoryName,
								@Description)
		   END    

		  	ELSE IF UPPER(@CategoryType) = 'ACTIVITY'         
				BEGIN         
					INSERT INTO  [dbo].[ActivityCategory](
								 [Name],
								 [Description])
					   VALUES	 (@CategoryName,
								 @Description)
				END    
END TRY      
	BEGIN CATCH      
		DECLARE @@ThrowMsg VARCHAR(MAX)      
		    SET @@ThrowMsg = CONCAT ('ErrorNumber: ',ERROR_NUMBER(),      
				'ErrorMessage: ',ERROR_MESSAGE());        
		  THROW 51000, @@ThrowMsg, 1;      
	END CATCH        
END      


/***********************************************************************************************************************************/

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
-- ============================================================================      
-- Author: Elias Viquez     
-- Create date:  4 Julio 2025       
-- Description:  Insert a Status to the catalog (Able to be used on Rooms,  Beds and Activities)     
-- Materia: Fundamentos de bases de datos relacionales        
-- Version: 1.0.0      
-- REF: 00      
-- HISTORY:      
-- ============================================================================  
CREATE OR REPLACE PROCEDURE [dbo].[SP_GN_AddNewStatusToTheCatalog]
				 @Status VARCHAR(125) = NULL, 
				 @Description VARCHAR(200) = NULL

AS
	BEGIN
		-- START TRY
			BEGIN TRY
					INSERT INTO   [dbo].[StatusCatalog](
								  [Status],
								  [Description])
						 VALUES	  (@Status,
								  @Description)
		-- END TRY
			END TRY
	--START CATCH
	BEGIN CATCH
		SELECT
				ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
 
END

/***********************************************************************************************************************************/

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
-- ============================================================================      
-- Author: Elias Viquez     
-- Create date:  4 Julio 2025         
-- Description:  Get the list of employees by an Hostal Id      
-- Materia: Fundamentos de bases de datos relacionales        
-- Version: 1.0.0      
-- REF: 00      
-- HISTORY:      
-- ============================================================================  
CREATE OR REPLACE PROCEDURE [dbo].[SP_GN_GetEmployeesByHotelId]
				 @HotelId INT = NULL 
AS
	BEGIN
		-- START TRY
			BEGIN TRY
						 SELECT   E.EmployeeId,
								  E.[Name],
							      [Email],
								  [PhoneNumber]
						   FROM   [dbo].[Employee] AS E
					 INNER JOIN	  [Hostal] ON E.HotelId = Hostal.HotelId 
						  WHERE   E.[HotelId] = @HotelId
		-- END TRY
			END TRY
	--START CATCH
	BEGIN CATCH
		SELECT
				ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
 
END

/***********************************************************************************************************************************/

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
-- ============================================================================      
-- Author: Elias Viquez     
-- Create date:  4 Julio 2025          
-- Description:  Insert a new supplier on the supplier list      
-- Materia: Fundamentos de bases de datos relacionales        
-- Version: 1.0.0      
-- REF: 00      
-- HISTORY:      
-- ============================================================================  
CREATE OR REPLACE PROCEDURE [dbo].[SP_GN_AddNewSupplier]
				 @HotelId INT = NULL, 
				 @Name VARCHAR(255) = NULL ,
				 @Location VARCHAR(255) = NULL,
				 @ContactPersonName VARCHAR(255) = NULL,
				 @PhoneNumber VARCHAR(20) = NULL

AS
	BEGIN
		-- START TRY
			BEGIN TRY
					INSERT INTO   [dbo].[Supplier](
								  [HotelId],
								  [Name],
								  [Location],
								  [ContactPersonName],
								  [PhoneNumber])
						 VALUES	  (@HotelId,
								  @Name,
								  @Location,
							      @ContactPersonName,
								  @PhoneNumber)
		-- END TRY
			END TRY
	--START CATCH
	BEGIN CATCH
		SELECT
				ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
 
END

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CREATE OR REPLACE PROCEDURE [dbo].[SP_GN_AddRoom]
    @HotelId INT,
    @RoomCategoryId INT,
    @BedsQty INT,
    @Price DECIMAL(10,2)
AS
BEGIN
    BEGIN TRY
        INSERT INTO [dbo].[Room] (
            HotelId,
            RoomCategoryId,
            BedsQty,
            Price
        )
        VALUES (
            @HotelId,
            @RoomCategoryId,
            @BedsQty,
            @Price
        )
    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END


CREATE OR REPLACE PROCEDURE [dbo].[SP_GN_UpdateRoom]
    @RoomId INT,
    @HotelId INT = NULL,
    @RoomCategoryId INT = NULL,
    @BedsQty INT = NULL,
    @Price DECIMAL(10,2) = NULL
AS
BEGIN
    BEGIN TRY
        UPDATE [dbo].[Room]
        SET
            HotelId = ISNULL(@HotelId, HotelId),
            RoomCategoryId = ISNULL(@RoomCategoryId, RoomCategoryId),
            BedsQty = ISNULL(@BedsQty, BedsQty),
            Price = ISNULL(@Price, Price)
        WHERE Id = @RoomId
    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END


CREATE OR REPLACE PROCEDURE [dbo].[SP_GN_DeleteRoom]
    @RoomId INT
AS
BEGIN
    BEGIN TRY
        DELETE FROM [dbo].[Room]
        WHERE Id = @RoomId
    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END


CREATE OR REPLACE PROCEDURE [dbo].[SP_GN_AddActivity]
    @HotelId INT,
    @ActivityCategoryId INT,
    @Price DECIMAL(10,2)
AS
BEGIN
    BEGIN TRY
        INSERT INTO [dbo].[Activity] (
            HotelId,
            ActivityCategoryId,
            Price
        )
        VALUES (
            @HotelId,
            @ActivityCategoryId,
            @Price
        )
    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END


CREATE OR REPLACE PROCEDURE [dbo].[SP_GN_UpdateActivity]
    @ActivityId INT,
    @HotelId INT = NULL,
    @ActivityCategoryId INT = NULL,
    @Price DECIMAL(10,2) = NULL
AS
BEGIN
    BEGIN TRY
        UPDATE [dbo].[Activity]
        SET
            HotelId = ISNULL(@HotelId, HotelId),
            ActivityCategoryId = ISNULL(@ActivityCategoryId, ActivityCategoryId),
            Price = ISNULL(@Price, Price)
        WHERE Id = @ActivityId
    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END


CREATE OR REPLACE PROCEDURE [dbo].[SP_GN_DeleteActivity]
    @ActivityId INT
AS
BEGIN
    BEGIN TRY
        DELETE FROM [dbo].[Activity]
        WHERE Id = @ActivityId
    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage;
    END CATCH
END


--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
-- ============================================================================      
-- Author: Elias Viquez     
-- Create date:  4 Julio 2025     
-- Description:  SP para la inserci�n de Hostales  
-- Materia: Fundamentos de bases de datos relacionales        
-- Version: 1.0.0      
-- REF: 00      
-- HISTORY:      
-- ============================================================================  
CREATE OR REPLACE PROCEDURE [dbo].[FN_GN_AddHostal]
				 @Nombre VARCHAR(125),
				 @Description VARCHAR(200)
AS
	BEGIN
		-- START TRY
			BEGIN TRY
					 INSERT INTO  [dbo].[Hostal]
								  (Name,
								  Description) 
						  VALUES 
								  (@Nombre,
								  @Description)
		-- END TRY
			END TRY
	--START CATCH
	BEGIN CATCH
		SELECT
				ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
 
END

--EXEC [dbo].[FN_GN_AddHostal]
--@Nombre = 'Name test2',
--@Description = 'Description test'

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
-- ============================================================================      
-- Author: Elias Viquez     
-- Create date:  4 Julio 2025     
-- Description:  SP para consutar la disponibilidad de una habitaci�n
-- Materia: Fundamentos de bases de datos relacionales        
-- Version: 1.0.0      
-- REF: 00      
-- HISTORY:      
-- ============================================================================  
CREATE OR REPLACE PROCEDURE [dbo].[FN_GN_GetRoomStatus]
				 @RoomId INT
AS
	BEGIN
		-- START TRY
			BEGIN TRY
					 SELECT  SC.Status
					   FROM  RoomStatus RS
					   JOIN  StatusCatalog SC ON RS.StatusId = SC.StatusId
					  WHERE  RS.RoomId = @RoomId;
		-- END TRY
			END TRY
	--START CATCH
	BEGIN CATCH
		SELECT
				ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
 
END

--EXEC [dbo].[FN_GN_GetRoomStatus]
--@RoomId = 3


--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
-- ============================================================================      
-- Author: Elias Viquez     
-- Create date:  4 Julio 2025    
-- Description:  SP para la inserci�n de Customers  
-- Materia: Fundamentos de bases de datos relacionales        
-- Version: 1.0.0      
-- REF: 00      
-- HISTORY:      
-- ============================================================================  
CREATE OR REPLACE PROCEDURE [dbo].[FN_GN_AddCustomer]
				 @Name VARCHAR(255),
				 @PhoneNumber VARCHAR(20),
				 @Email VARCHAR(255),
				 @Address VARCHAR(255),
				 @BirthDate DATE
AS
	BEGIN
		-- START TRY
			BEGIN TRY
					 INSERT INTO  [dbo].[Customer]
								  (Name,
								  PhoneNumber,
								  Email, 
								  Address,
								  BirthDate)
						  VALUES 
								  (@Name,
								  @PhoneNumber,
								  @Email, 
								  @Address,
								  @BirthDate)
		-- END TRY
			END TRY
	--START CATCH
	BEGIN CATCH
		SELECT
				ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
 
END

--EXEC [dbo].[FN_GN_AddCustomer]
--@Name = 'John Cortes',
--@PhoneNumber = '123-456-7890',
--@Email = 'john.doe@email.com', 
--@Address = '123 Main St, Cityville',
--@BirthDate = '1985-07-14'


--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
-- ============================================================================      
-- Author: Elias Viquez     
-- Create date:  4 Julio 2025    
-- Description:  SP para consutar todos los Customers ordenados por su nombre alfabeticamente
-- Materia: Fundamentos de bases de datos relacionales        
-- Version: 1.0.0      
-- REF: 00      
-- HISTORY:      
-- ============================================================================  
CREATE OR REPLACE PROCEDURE [dbo].[FN_GN_GetAllCustomers]
AS
	BEGIN
		-- START TRY
			BEGIN TRY
					 SELECT  *
					   FROM  Customer
				   ORDER BY  Name
		-- END TRY
			END TRY
	--START CATCH
	BEGIN CATCH
		SELECT
				ERROR_NUMBER() AS ErrorNumber,
				ERROR_MESSAGE() AS ErrorMessage;
	END CATCH
 
END

--EXEC [dbo].[FN_GN_GetAllCustomers]

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- ********************************** FUNCTIONS **********************************

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ============================================================================
-- Author: Elias Viquez     
-- Create date:  4 Julio 2025    
-- Description: Retrieves all activities for a specific hostel 
-- Materia: Fundamentos de bases de datos relacionales 
-- Version: 1.0.0
-- REF: 00      
-- HISTORY:
-- ============================================================================  
CREATE FUNCTION fn_GetActivitiesByHostal (@HotelId INT)
RETURNS TABLE
AS
RETURN
        SELECT 
				A.ActivityId,
				A.Price,
				AC.Name AS CategoryName,
				AC.Description AS CategoryDescription
		  FROM  Activity A
	INNER JOIN  ActivityCategory AC ON A.ActivityCategoryId = AC.ActivityCategoryId
		 WHERE  A.HotelId = @HotelId;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
-- ============================================================================      
-- Author: Elias Viquez     
-- Create date:  4 Julio 2025     
-- Description: Returns the count of suppliers, optionally filtered by hostel 
-- Materia: Fundamentos de bases de datos relacionales 
-- Version: 1.0.0
-- REF: 00      
-- HISTORY:      
-- ============================================================================  
CREATE FUNCTION fn_GetSupplierCount()
RETURNS INT
AS
BEGIN
		DECLARE @Count INT;
		SELECT  @Count = COUNT(*) FROM Supplier;
		RETURN  @Count;
END;

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
-- ============================================================================      
-- Author: Elias Viquez     
-- Create date:  4 Julio 2025       
-- Description: Returns count of reserved and vacant rooms for a specific hostel  
-- Materia: Fundamentos de bases de datos relacionales 
-- Version: 1.0.0
-- REF: 00      
-- HISTORY:      
-- ============================================================================  
CREATE FUNCTION fn_GetRoomStatusCountByHostal (@HotelId INT)
RETURNS TABLE
AS
RETURN
        SELECT	S.Status,
                COUNT(*) AS RoomCount
          FROM  Room R
    INNER JOIN  RoomStatus RS ON R.RoomId = RS.RoomId
    INNER JOIN  StatusCatalog S ON RS.StatusId = S.StatusId
         WHERE  R.HotelId = @HotelId
      GROUP BY  S.Status;



--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- ********************************** VIEWS **********************************

--Avance #3
--Grupo 1

--View #1: View to check the existing room per each Hostal

GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--=======================================================================
-- Author: Elias Viquez Segura
-- Creation Date:  05/17/2025
-- Version: 1.0.0
-- REF: 0
-- HISTORY:
--=======================================================================

GO

CREATE VIEW ViewRoomsByHostal AS
SELECT H.HotelId, 
	   H.Name AS HostalName,
	   R.RoomId,
	   R.RoomCategoryId,
	   R.BedsQty,
	   R.Price
  FROM Hostal H
INNER JOIN Room R ON H.HotelId = R.HotelId
INNER JOIN RoomCategory RC on R.RoomCategoryId = RC.RoomCategoryId

--SELECT * FROM ViewRoomsByHostal

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- View 2: Shows rooms with their category and status
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--=======================================================================
-- Author: Elias Viquez Segura
-- Creation Date:  05/17/2025
-- Version: 1.0.0
-- REF: 0
-- HISTORY:
--=======================================================================

GO
CREATE VIEW RoomByCategoryStatus AS
SELECT  R.RoomId,
		RC.Category,
		SC.Status
  FROM	Room R
INNER JOIN RoomCategory RC ON R.RoomCategoryId = RC.RoomCategoryId
INNER JOIN RoomStatus RS ON R.RoomId = RS.RoomId
INNER JOIN StatusCatalog SC ON RS.StatusId = SC.StatusId

--SELECT * FROM RoomByCategoryStatus

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- View 3: Shows bookings with customer and room information

GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--=======================================================================
-- Author: Elias Viquez Segura
-- Creation Date:  05/17/2025
-- Version: 1.0.0
-- REF: 0
-- HISTORY:
--=======================================================================

GO
CREATE VIEW ViewDetailedRoomReservation AS
SELECT  RR.ReservationId AS BookingID,
		C.Name AS CustomerName,
		R.RoomId AS RoomNumber,
		RC.Category AS RoomType,
		RR.CheckInDate,
		RR.CheckOutDate,
		RR.Price AS TotalPrice,
		DATEDIFF(DAY, RR.CheckInDate, RR.CheckOutDate) AS DaysReserved
  FROM  Room R
INNER JOIN RoomReservation RR ON R.RoomId = RR.RoomId
INNER JOIN Customer C ON RR.CustomerId = C.CustomerId
INNER JOIN RoomCategory RC ON RC.RoomCategoryId = R.RoomCategoryId

--SELECT * FROM ViewDetailedRoomReservation

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- View 4: Shows activities with their category and Hostal

GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--=======================================================================
-- Author: Elias Viquez Segura
-- Creation Date:  05/17/2025
-- Version: 1.0.0
-- REF: 0
-- HISTORY:
--=======================================================================

GO
CREATE VIEW ActivityCategoriesInfo AS
SELECT  A.ActivityId,
		H.Name AS Hostal,
        AC.Name AS Category,
        AC.Description AS Description
  FROM  Activity A
INNER JOIN ActivityCategory AC ON A.ActivityCategoryId = AC.ActivityCategoryId
INNER JOIN Hostal H ON A.HotelId = H.HotelId

--SELECT * FROM ActivityCategoriesInfo

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- View 5: Show Reservations with customer and Bed information

GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--=======================================================================
-- Author: Elias Viquez Segura
-- Creation Date:  05/17/2025
-- Version: 1.0.0
-- REF: 0
-- HISTORY:
--=======================================================================

GO
CREATE VIEW ViewDetailedBedReservation AS
SELECT  BR.ReservationId AS BookingID,
		C.Name AS CustomerName,
		B.BedId AS BedNumber,
		R.RoomId AS LocatedInRoom,
		BR.CheckInDate,
		BR.CheckOutDate,
		BR.Price AS TotalPrice,
		DATEDIFF(DAY, BR.CheckInDate, BR.CheckOutDate) AS DaysReserved
  FROM  Bed B
INNER JOIN BedReservation BR ON B.BedId = BR.BedId
INNER JOIN Customer C ON BR.CustomerId = C.CustomerId
INNER JOIN Room R ON B.RoomID = R.RoomId

--SELECT * FROM ViewDetailedBedReservation 

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-- ********************************** TRIGGERS **********************************
-- Trigger #1

GO
CREATE TABLE DBO.AuditActivity (
	AuditId INT PRIMARY KEY IDENTITY(1,1),
	HotelId INT,
	ActivityId INT,
    Action VARCHAR(30) NOT NULL,
    Date DATETIME DEFAULT GETDATE(),
    [User] VARCHAR(50) DEFAULT SYSTEM_USER,
    Detail VARCHAR(500));

GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--=======================================================================
-- Author: Elias Viquez Segura
-- Creation Date:  05/17/2025
-- Description: Trigger to map all updates and Insertion
-- Version: 1.0.0
-- REF: 0
-- HISTORY:
--=======================================================================

CREATE TRIGGER [dbo].[TG_GN_AuditActivity]
   ON  [dbo].[Activity]
   FOR INSERT, UPDATE
AS 
	BEGIN
		 INSERT INTO  AuditActivity (HotelId, ActivityId, Action, Detail)
			  SELECT  I.HotelId, 
					  I.ActivityId, 
					  'INSERT/UPDATE', 
					  CONCAT('NEW VALUES: ActivityId: ', I.ActivityId, 
					  ', CategoryId: ', I.ActivityCategoryId , 
					  ', Price: ', I.Price,
					  ', HotelId: ', I.HotelId)
				FROM  Inserted I;
	  END

--SELECT * FROM AuditActivity

--INSERT INTO Activity VALUES(1, 5, 10.55)

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`
-- Trigger #2

GO
CREATE TABLE AuditRoomStatus (
	AuditId INT PRIMARY KEY IDENTITY(1,1),
	RoomId INT,
    Action VARCHAR(30) NOT NULL,
    Date DATETIME DEFAULT GETDATE(),
    [User] VARCHAR(50) DEFAULT SYSTEM_USER,
    Detail VARCHAR(500));

GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--=======================================================================
-- Author: Elias Viquez Segura
-- Creation Date:  09/04/2025
-- Description: Audit room status changing when changed manually
-- Version: 1.0.0
-- REF: 0
-- HISTORY:
--=======================================================================
CREATE TRIGGER [dbo].[TG_GN_AuditRoomStatus]
   ON  RoomStatus
   FOR UPDATE
AS 
	BEGIN
		 INSERT INTO  AuditRoomStatus (RoomId, Action, Detail)
			  SELECT  I.RoomId, 
					  'UPDATE', 
					  CONCAT('NEW VALUES: ', 
					  'StatusId: ', I.StatusId,
					  ', Comment: ', I.Comment)
			    FROM  Inserted I;
	  END

--SELECT * FROM AuditRoomStatus

--UPDATE RoomStatus SET StatusId = 4 WHERE RoomId = 14

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`
-- Trigger #3

GO
CREATE TABLE AuditSupplyMovement (
	AuditId INT PRIMARY KEY IDENTITY(1,1),
	SupplyId INT,
    Action VARCHAR(30) NOT NULL,
    Date DATETIME DEFAULT GETDATE(),
    [User] VARCHAR(50) DEFAULT SYSTEM_USER,
    Detail VARCHAR(500));

GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--=======================================================================
-- Author: Elias Viquez Segura
-- Creation Date:  05/17/2025
-- Description: Trigger to map all Entries and movements of supplies
-- Version: 1.0.0
-- REF: 0
-- HISTORY:
--=======================================================================
CREATE TRIGGER [dbo].[TG_GN_AuditSupplyMovement]
   ON  [dbo].[Supply]
   For INSERT, UPDATE
AS 
	BEGIN
		 INSERT INTO  AuditSupplyMovement (SupplyId, Action, Detail)
			  SELECT  I.SupplyId, 
					  'INSERT/UPDATE', 
					  CONCAT('NEW VALUES: ', 
					  'SupplierId: ', I.SupplierId,
					  ', Quantity: ', I.Quantity,
					  ', Name: ', I.Name,
					  ', TotalPrice: ', I.TotalPrice)
			   FROM  Inserted I;
	  END

--SELECT * FROM AuditSupplyMovement

--UPDATE SUPPLY SET Quantity = 200 WHERE SupplyId = 14
